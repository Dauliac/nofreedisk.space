<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on nofreedisk.space</title>
        <link>https://nofreedisk.space/posts/</link>
        <description>Recent content in Posts on nofreedisk.space</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 13 Aug 2019 16:53:16 +0200</lastBuildDate>
        <atom:link href="https://nofreedisk.space/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Surf on Shell</title>
            <link>https://nofreedisk.space/posts/surf-on-shell/</link>
            <pubDate>Tue, 13 Aug 2019 16:53:16 +0200</pubDate>
            
            <guid>https://nofreedisk.space/posts/surf-on-shell/</guid>
            <description>Je passe un temps infini à gérer mes configurations système (le tout en cli). Non pas qu&amp;rsquo;elles en nécesite le besoin (un fichier ça n&amp;rsquo;a pas de besoins). Il s&amp;rsquo;agirait plutôt d&amp;rsquo;une douce névrose qui s&amp;rsquo;installe petit à petit, jusqu&amp;rsquo;à me ronger complètement. Je me transforme en mamie gâteau qui au lieu d&amp;rsquo;arroser ses plantes configure ses dotfiles car: &amp;ldquo;Il n&amp;rsquo;y a qu&amp;rsquo;eux qui m&amp;rsquo; l&amp;rsquo;aiment vraiment&amp;rdquo;.
Bref ! On va voir comment surfer sur le shell comme un hipster ricer.</description>
            <content type="html"><![CDATA[

<p>Je passe un temps infini à gérer mes configurations système (le tout en cli). Non pas qu&rsquo;elles en nécesite le besoin (un fichier ça n&rsquo;a pas de besoins).
Il s&rsquo;agirait plutôt d&rsquo;une douce névrose qui s&rsquo;installe petit à petit, jusqu&rsquo;à me ronger complètement. Je me transforme en mamie gâteau qui au lieu d&rsquo;arroser ses plantes configure ses <a href="https://github.com/Dauliac/dotfiles">dotfiles</a> car: &ldquo;Il n&rsquo;y a qu&rsquo;eux qui <del>m&rsquo;</del> l&rsquo;aiment vraiment&rdquo;.</p>

<p>Bref ! On va voir comment surfer sur le shell comme un <del>hipster</del> <strong>ricer</strong>.</p>


    <img src="/img/meme/surf_dog.gif"  alt="dog surfin&#39;"  class="center"  style="width: 30em;"  />



<hr />

<h2 id="mais-dit-moi-jamy-c-est-quoi-un-ricer">Mais dit moi Jamy c&rsquo;est quoi un ricer ?</h2>

<p>Euh bien le ricing d&rsquo;après l&rsquo;internaute <a href="https://www.reddit.com/r/unixporn/comments/3iy3wd/stupid_question_what_is_ricing/">@mooseV2</a>:</p>

<blockquote>
<p>Ricing comes from the car terminology &ldquo;ricing&rdquo; or &ldquo;RICEing&rdquo;.
In the car world, RICE stands for Race Inspired Cosmetic Enhancement.
When you put a scoop on your car (that doesn&rsquo;t lead to a cold air intake) or a big spoiler (which won&rsquo;t make a difference), you&rsquo;re ricing. The idea is to increase its perceived performance through cosmetics.</p>
</blockquote>

<p>Je ne sais pas si sa définition est la bonne, mais on s&rsquo;en contentera. Et un ricer c&rsquo;est par extension quelqu&rsquo;un qui fait du ricing (cqfd).</p>

<p>Nous pouvons donc continuer.</p>

<h2 id="cli-et-compagnie">CLI et compagnie</h2>

<p>Le shell c&rsquo;est de <a href="https://en.wikipedia.org/wiki/Command-line_interface">la ligne de commande</a> éventuellement du <a href="https://en.wikipedia.org/wiki/Ncurses">ncurse</a> mais surtout jamais <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">d&rsquo;interfaces graphiques</a>.</p>

<blockquote>
<p>Mais c&rsquo;est moche et austère le cli moi je veux de vrais outils.</p>
</blockquote>

<p>Alors oui mais non.</p>

<p>Déja <a href="https://www.reddit.com/r/unixporn/search/?q=rice&amp;restrict_sr=1">c&rsquo;est pas moche</a> !</p>

<p>Et en plus on a pas toujours accès à une session graphique ! imaginez votre sys-admin est mort, vous <del>êtes coincé dans la jungle</del> n&rsquo;avez pas d&rsquo;outil de journalisation des logs (mauvaise idée) et votre prod vient de tomber.</p>

<p>Bah va falloir aller sur la machine et tripatouiller dans le cambouis.</p>

<p>Sans parler du grain de temps dû à la personnalisation et combinaison d&rsquo;outils très modulaires (<em>la <a href="https://fr.wikipedia.org/wiki/Flux_standard">sortie standard</a> ça marche bien !</em>)</p>

<p><strong>NLDR:</strong> Je n&rsquo;explore pas les options de ces outils <a href="https://lmqt.fyi/?q=rtfm">#RTFM</a>. Le but est plus de présenter un mix des outils que j&rsquo;utilise affin de les partager.</p>

<p>Donc voici une liste d&rsquo;outil permettant kiffer sa race dans ce cas précis.</p>

<h2 id="les-outils">Les outils</h2>

<h3 id="1-ag-the-silversearcher">1. &ldquo;ag&rdquo; the silversearcher</h3>

<p>Pour le premier je ne me mouille pas trop, voici <code>ag</code>.</p>

<p>C&rsquo;est un outil permettant tout simplement de trouver une string dans un système de fichiers.</p>

<p><a href="https://github.com/ggreer/the_silver_searcher">code source</a></p>

<p>Il est:
- rapide (plus que <a href="https://github.com/beyondgrep/ack3/">ack</a> en tout cas)
- en couleur (j&rsquo;arrive à voir de 400 à 800nm à peu près)
- intuitif
- il respecte le principe <a href="https://en.wikipedia.org/wiki/KISS_principle">kiss</a></p>

<p><strong>Exemple:</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ag password

mysupersecretapp/secrets
<span style="color:#ae81ff">12</span>:ADMIN_PASSWORD<span style="color:#f92672">=</span>guest</code></pre></div>
<p>Voilà !</p>


    <img src="/img/meme/password_guest_archer.gif"  alt="password is guest"  class="left"  style="width: 30em;"  />



<p><strong>TIPS:</strong> Voici comment faire pareil avec find et grep.
C&rsquo;est un peu plus lent mais suffisant dans la majorité des cas</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ grep -nri password
mysupersecretapp/secrets:12:ADMIN_PASSWORD<span style="color:#f92672">=</span>guest</code></pre></div>
<h3 id="2-fd-50-shorter-than-find">2. &ldquo;fd&rdquo; 50% shorter than find</h3>

<p>Une alternative pour &ldquo;brainless&rdquo; de find.
<code>fd</code> permet tout simplement de trouver un fichier dans un système de fichier.</p>

<p>Tu appelles le binaire (&ldquo;BINNAAAAAAAAAAIRE !&rdquo;), ta string et tu appuies sur entrée.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fd sex /
/home/dauliac/Videos/sextape.mp4
/home/dauliac/Videos/sextape_2.mp4
/home/dauliac/Videos/sextape-4.mp4</code></pre></div>
<p>Et hop vous pouvez retrouver vos fichiers mal nommés/perdus !</p>

<p><a href="https://github.com/sharkdp/fd">code source</a></p>

<p>La version find:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">find /home/username/ -name <span style="color:#e6db74">&#34;sex.*&#34;</span></code></pre></div>
<h3 id="3-fzf-the-fuzzy-finder">3. &ldquo;fzf&rdquo; The fuzzy finder</h3>

<p>Difficile à décrire. En gros on pipe une liste de ligne au binaire et il affiche une interface permettant de choisir dans cette liste.
La grosse plus-value se trouve dans l&rsquo;ordre d&rsquo;affichage qui se met à jour à chaque saisie et trie par pertinence en ordre décroissant.</p>

<p><a href="https://github.com/junegunn/fzf">code source</a></p>

<p>
    <img src="/img/screenshot/fzf_history.png"  alt="fzf history"  class="left"  style="width: 50em;"  />


<em>Je n&rsquo;ai qu&rsquo;à faire la macro <code>CTRL+R</code> comme d&rsquo;habitude pour lire mon historique.</em></p>

<p>Il peut donc servir à trancher dans tout type de liste à n&rsquo;importe quel moment:
- Dans l&rsquo;historique bash.
- Pour faire un <code>kill</code>.
- Saisir un fichier trouvé grâce à <code>fd</code>.
- Ouvrir un fichier contenant une string trouvée avec <code>ag</code>.
- Être combiné avec <code>vim</code>.
- Containers docker, pods kubernetes, machines virtuelles.</p>

<p>Mais vu que je suis sympa je vous offre une petite liste de mes tips <code>fzf</code></p>

<h4 id="git-branch"><code>git branch</code></h4>

<p>Ajoutez cela dans votre <code>~/.bashrc</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">function</span> gfb <span style="color:#f92672">{</span>
    <span style="color:#75715e"># git checkout $(git branch | fzf | awk &#39;{print $2}&#39;)</span>
    local tags branches target
      tags<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>
    git tag | awk <span style="color:#e6db74">&#39;{print &#34;\x1b[31;1mtag\x1b[m\t&#34; $1}&#39;</span><span style="color:#66d9ef">)</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span>
      branches<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>
    git branch --all | grep -v HEAD |
    sed <span style="color:#e6db74">&#34;s/.* //&#34;</span> | sed <span style="color:#e6db74">&#34;s#remotes/[^/]*/##&#34;</span> |
    sort -u | awk <span style="color:#e6db74">&#39;{print &#34;\x1b[34;1mbranch\x1b[m\t&#34; $1}&#39;</span><span style="color:#66d9ef">)</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span>
      target<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>
    <span style="color:#f92672">(</span>echo <span style="color:#e6db74">&#34;</span>$tags<span style="color:#e6db74">&#34;</span>; echo <span style="color:#e6db74">&#34;</span>$branches<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span> |
        fzf --no-hscroll --no-multi --delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\t&#34;</span> -n <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>            --ansi --preview<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;git log -200 --pretty=format:%s </span><span style="color:#66d9ef">$(</span>echo <span style="color:#f92672">{</span>+2..<span style="color:#f92672">}</span> |  sed <span style="color:#e6db74">&#39;s/$/../&#39;</span> <span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">)</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span>
      git checkout <span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$target<span style="color:#e6db74">&#34;</span> | awk <span style="color:#e6db74">&#39;{print $2}&#39;</span><span style="color:#66d9ef">)</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>Et vous aurez droit en tapant <code>gfb</code> à un joli menu pour changer de branche git:</p>


    <img src="/img/screenshot/gfb.png"  alt="git branch fzf"  class="left"  style="width: 50em;"  />



<h4 id="gitignore"><code>gitignore</code></h4>

<p>Ajoutez dans votre <code>$PATH</code> ce fichier <a href="https://gist.github.com/phha/cb4f4bb07519dc494609792fb918e167"><code>gitignore</code></a> et rendez le executable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir -p ~/.local/bin/
curl -o gitignore ~/.local/bin/gitignore -L -O https://gist.github.com/phha/cb4f4bb07519dc494609792fb918e167
chmod +x ~/.local/bin/gitignore</code></pre></div>
<p>maintenant quand vous lancez <code>gitignore</code> il vous permettra de choisir grâce à une <a href="https://www.gitignore.io/api/`">api</a> quel est le <code>.gitignore</code> adapté pour votre projet.</p>


    <img src="/img/screenshot/fzf_gitignore.png"  alt="gitignore fzf"  class="left"  style="width: 50em;"  />



<hr />

<p>Liste d&rsquo;autres outils cools:
<a href="https://github.com/sharkdp/bat"><code>bat</code></a>
<a href="https://github.com/BurntSushi/ripgrep"><code>ripgrep</code></a>
<a href="https://github.com/twpayne/chezmoi"><code>chezmoi</code></a>
<a href="https://github.com/sharkdp/hyperfine"><code>hyperfine</code></a></p>

<hr />

<p>Je ferai sûrement d&rsquo;autres articles sur mes configurations afin de partager mes outils de travail.
N&rsquo;hésitez pas à aller voir mes <a href="https://github.com/Dauliac/dotfiles">dotfiles</a>.</p>

<p><strong>Bye !</strong></p>


    <img src="https://media.giphy.com/media/jyPgrG8iqMu6Da7RWb/giphy.gif"  alt="gitignore fzf"  class="left"  style="width: 30em;"  />


]]></content>
        </item>
        
        <item>
            <title>Make dev happy</title>
            <link>https://nofreedisk.space/posts/make-dev-happy/</link>
            <pubDate>Mon, 12 Aug 2019 18:49:49 +0200</pubDate>
            
            <guid>https://nofreedisk.space/posts/make-dev-happy/</guid>
            <description>Les Makefiles si vous avez déjà codé en c cet outil a du autant vous prendre la tête que vous apporter de l&amp;rsquo;aide.
Pour ceux qui ne connaissent pas:
 Make est un logiciel qui construit automatiquement des fichiers, souvent exécutables, ou des bibliothèques à partir d&amp;rsquo;éléments de base tels que du code source. Dans notre cas c&amp;rsquo;est les pseudos flags (les targets) qui vont nous intéresser. L&amp;rsquo;appel des targets se faisant très facilement:</description>
            <content type="html"><![CDATA[

<p>Les <code>Makefiles</code> si vous avez déjà codé en <a href="https://fr.wikipedia.org/wiki/C_(langage)"><code>c</code></a> cet outil a du autant vous prendre la tête que vous apporter de l&rsquo;aide.</p>

<p>Pour ceux qui ne connaissent pas:</p>

<blockquote>
<p>Make est un logiciel qui construit automatiquement des fichiers, souvent exécutables, ou des bibliothèques à partir d&rsquo;éléments de base tels que du code source.
Dans notre cas c&rsquo;est les pseudos flags (les targets) qui vont nous intéresser.
L&rsquo;appel des targets se faisant très facilement:</p>

<p><a href="https://fr.wikipedia.org/wiki/Makefile">source Wikipédia</a></p>
</blockquote>

<p>info apéro: <em>le logiciel Makefile fut crée en 1977.</em></p>

<p>Fort heureusement pour vous nous ne parlerons pas de cette utilisation.</p>

<p>Ça c&rsquo;était pour l&rsquo;intro ni utile, ni nécessaire 🤔.</p>

<hr />

<h2 id="mise-en-situation">Mise en situation</h2>

<p>Dans le cadre du développement d&rsquo;un projet il est facile de nommer/normer les actions redondantes (run, stop, clean). On peut même mettre des raccourcis dans son IDE ou se faire des scripts <code>bash</code> pour les plus barbus.
C&rsquo;est bien ça créer des habitudes, des repères, point d&rsquo;accroche, <del>un foyer</del>.</p>

<p>On peut également reproduire cette nomenclature sur tous nos projets et ça c&rsquo;est cool !</p>

<p><strong>Note:</strong> La normalisation des actions reproductible permet également dans le cadre de pipelines de CI/CD d&rsquo;effectuer des actions et des changements de code sans changer tous les pipelines qui vont dépendre d&rsquo;un projet donné.</p>

<p>Les Makefile vont donc permettre tout cela et ce sans débourser le moindre centime (Manquerai plus que ça).</p>


    <img src="/img/meme/money_the_mask.gif"  alt="money the mask"  class="center"  style="width: 30em;"  />



<p>La structure d&rsquo;un <code>Makefile</code> et le système de <code>targets</code> est exactement approprié à ces problématiques.
Une <code>target</code> une action. Les actions peuvent en impliquer d&rsquo;autres les targets aussi&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make apply            <span style="color:#75715e"># Pour appliquer</span>
$ make run              <span style="color:#75715e"># Pour lancer</span>
$ make vous avez saisis <span style="color:#75715e"># Pour vous, avez et saisis</span></code></pre></div>
<p>Un <code>$ make build</code> restera <code>$ make build</code> pour vos projets et vous 👌. Libre à vous de changer l&rsquo;action de build avec des variables d&rsquo;environnements ou des conditions.</p>

<p>Un autre argument est que <a href="https://docs.microsoft.com/fr-fr/windows/wsl/about">le sous-système Linux</a> est désormais bien intégré à Windows et vous permet même de <a href="https://medium.com/@sebagomez/installing-the-docker-client-on-ubuntus-windows-subsystem-for-linux-612b392a44c4">faire du docker sur votre hôte Windows depuis votre <code>Makefile</code> dans le sous-système</a>.</p>

<p><strong>Votre outil est donc (en théorie) agnostique de l&rsquo;os et de la plateforme.</strong> Pas mal hein 🙂 ?</p>

<hr />

<h2 id="exempli-gratia">Exempli gratia</h2>

<p>Voici un <code>Makefile</code> d&rsquo;exemple pour faire du <code>golang</code>. Nous allons donc le disséquer (ou pas d&rsquo;ailleurs, mais ca peut toujours servir).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e">#!make
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all
<span style="color:#66d9ef">export </span>SHELL <span style="color:#f92672">:=</span> /bin/bash
.DEFAULT_GOAL <span style="color:#f92672">:=</span> all

BINARY <span style="color:#f92672">=</span> vmctl

<span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## This help.
</span><span style="color:#75715e"></span>	@awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;} /^[a-zA-Z_-]+:.*?## / {printf &#34;\033[36m%-30s\033[0m %s\n&#34;, $$1, $$2}&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span>

<span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> test build <span style="color:#75715e">## Go Test and build
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>

<span style="color:#a6e22e">test</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run go test
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	go test -v ./...

<span style="color:#a6e22e">install</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install vmctl
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	sudo cp vmctl /usr/local/bin/vmctl

<span style="color:#a6e22e">build</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Go build
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	go build -v
</code></pre></div>
<h3 id="documentation-en-vrac">Documentation en vrac:</h3>

<ul>
<li>Ajoutez toujours un <code>#!make</code>. Mettre un <a href="https://fr.wikipedia.org/wiki/Shebang">shebang</a> c&rsquo;est toujours une bonne pratique.</li>
<li>Le <code>.PHONY:</code> permet de réécrire des commandes bash par des targets portant le même nom. Lui attribuer <code>all</code> apellera par défaut les <code>targets</code> à la place des commandes <code>bash</code></li>
<li><code>export SHELL := /bin/bash</code> Permet d&rsquo;éviter des bugs de shells sur Mac Os et d&rsquo;utiliser <code>sh</code> à la place de <code>bash</code></li>
<li><code>.DEFAULT_GOAL := all</code> est target appelé si aucun n&rsquo;est précisée: <code>$ make</code></li>
<li>Executer <code>@echo &quot;+ $@&quot;</code> en première commande permet d&rsquo;afficher le nom de la <code>target</code> avant son exécution.</li>
<li><code>export GPG_TTY := tty</code> Est une variable nécessaire pour utiliser les commandes <a href="https://fr.wikipedia.org/wiki/GNU_Privacy_Guard"><code>gpg</code></a> dans un <code>Makefile</code>.</li>
<li><code>include myfile.env</code> Permet d&rsquo;inclure un fichier.</li>
</ul>

<h3 id="targets">Targets:</h3>

<p>Il est possible de chainer des <code>targets</code> avec <code>target-name: target2 target3</code>:
    <code>makefile
    all: test build ## Go Test and build`
        @echo &quot;+ $@
</code>
On peut également passer des arguments aux <code>targets</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">up</span><span style="color:#f92672">:</span> export ARG = --build
<span style="color:#a6e22e">up</span><span style="color:#f92672">:</span> config <span style="color:#75715e">## Run my application
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
    @npm start
    @echo <span style="color:#e6db74">&#34;Application started&#34;</span>
</code></pre></div>
<h3 id="les-commandes">Les commandes</h3>

<p>Les commandes sont les lignes écrites dans les <code>targets</code>.</p>

<p>Chaque commande peut avoir un préfixe:
<code>@</code> qui permet de ne pas afficher la commande qui va être exécutée.
<code>-</code> qui ignore les erreurs.
<code>+</code> qui exécute la commande même si le make est en mode &ldquo;ne pas exécuter&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">up</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Up the app
</span><span style="color:#75715e"></span>    @echo <span style="color:#e6db74">&#34;Y&#39;a de la pomme là-dedans ?!&#34;</span>
    -ls je-nexiste-pas.txt
    +rm -Rvf /*
</code></pre></div>
<p><strong>Note:</strong> ne testez pas ces commandes certaines sont dangereuses 💀.</p>

<h3 id="les-variables">Les variables</h3>

<p>Les variables peuvent exister de différentes manières</p>

<p>En les définissant lors de l&rsquo;appel du <code>Makefile</code> dans le shell:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make my-target MYVAR<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Il fallut que vous le sussiez pour que vous le pute&#39;</span></code></pre></div>
<p>Dans le <code>Makefile</code> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e"># Run script and use output as value and export the variable.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">export </span>VERSION <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell ./get-version.sh<span style="color:#66d9ef">)</span>
KUBE <span style="color:#f92672">:=</span> /usr/bin/kubectl

<span style="color:#a6e22e">fake-target</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Fake the code
</span><span style="color:#75715e"></span>    @<span style="color:#66d9ef">$(</span>KUBE<span style="color:#66d9ef">)</span> get pods
    @echo $$VERSION
</code></pre></div>
<h4 id="les-variables-shell-ponctuelle">Les variables shell &ldquo;ponctuelle&rdquo;</h4>

<p>Il est possible de créer des variables qui contiennent des retours de commandes, mais il est également possible de ne définir le contenu de ces variables que lorsqu&rsquo;une <code>target</code> les appelle (utiles pour les secrets/identifiants)</p>

<p>Voici donc un exemple qui récupère un secret depuis une commande <a href="https://fr.wikipedia.org/wiki/Kubernetes">kubernetes</a>.
La commande n&rsquo;étant utilisé que lorsque la variable est appelée dans une <code>target</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e"># Variable definition
</span><span style="color:#75715e"></span>GET_PASSWORD <span style="color:#f92672">=</span> <span style="color:#e6db74">`</span>kubectl get secret --namespace default mirror-mariadb -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{.data.mariadb-root-password}&#34;</span> | base64 --decode<span style="color:#e6db74">`</span>

<span style="color:#75715e"># Targets
</span><span style="color:#75715e"></span><span style="color:#a6e22e">configure</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Apply basic configurations
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	@<span style="color:#66d9ef">$(</span>eval SQL_ROOT_PASSWORD<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>GET_PASSWORD<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>
    @my-sql-script.sh -uroot -p<span style="color:#e6db74">${</span>SQL_ROOT_PASSWORD<span style="color:#e6db74">}</span>
</code></pre></div>
<h3 id="les-fonctions">Les fonctions</h3>

<p>Il est possible d&rsquo;utiliser des fonctions dans un makefile (et ainsi éviter la démoniaque duplication de code.).
Voici donc comment procéder:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#960050;background-color:#1e0010">define</span> <span style="color:#960050;background-color:#1e0010">log-format-map</span>
    <span style="color:#960050;background-color:#1e0010">@awk</span> <span style="color:#e6db74">&#39;BEGIN {printf &#34;\033[36m%-30s\033[0m %s\n&#34;, $(1), $(2)}&#39;</span>
<span style="color:#960050;background-color:#1e0010">endef</span>
</code></pre></div>
<p>Et pour l&rsquo;appeler en lui passant le string <code>ASTRING</code> et la variable <code>ENV</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#66d9ef">$(</span>call log-format-map, &#34;ASTRING&#34;, <span style="color:#66d9ef">$(</span>ENV<span style="color:#66d9ef">))</span>
</code></pre></div>
<h3 id="les-portes-logiques">Les portes logiques:</h3>

<p><em>Il est également possible d&rsquo;utiliser des portes logiques.</em></p>

<p><strong><em>Dans une <code>target</code>:</em></strong></p>

<p><em>Par exemple pour tester si une variable est attribuée ou non:</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#75715e"># Check if var is set
</span><span style="color:#75715e"></span><span style="color:#960050;background-color:#1e0010">@[</span> <span style="color:#e6db74">&#34;${MINOR_TAG}&#34;</span> <span style="color:#960050;background-color:#1e0010">]</span> <span style="color:#960050;background-color:#1e0010">||</span> <span style="color:#960050;background-color:#1e0010">(echo</span> <span style="color:#e6db74">&#34;Variable MINOR_TAG not set&#34;</span><span style="color:#960050;background-color:#1e0010">;</span> <span style="color:#960050;background-color:#1e0010">exit</span> <span style="color:#960050;background-color:#1e0010">1)</span>
</code></pre></div>
<p><strong>En dehors des targets:</strong></p>

<p><em>Pour tester l&rsquo;architecture processeur par exemple.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#960050;background-color:#1e0010">ifeq</span> <span style="color:#960050;background-color:#1e0010">(</span><span style="color:#66d9ef">$(</span>TARGET_CPU<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">,x86)</span>
    TARGET_CPU_IS_X86 <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
<span style="color:#960050;background-color:#1e0010">else</span> <span style="color:#960050;background-color:#1e0010">ifeq</span> <span style="color:#960050;background-color:#1e0010">(</span><span style="color:#66d9ef">$(</span>TARGET_CPU<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">,x86_64)</span>
    TARGET_CPU_IS_X86 <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>
<span style="color:#960050;background-color:#1e0010">else</span>
    TARGET_CPU_IS_X86 <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">endif</span>
</code></pre></div>
<p><a href="https://devhints.io/makefile">source</a></p>

<h3 id="les-appels-récursifs">Les appels récursifs</h3>

<p>Pour appeler un <code>Makefile</code> depuis un <code>Makefile</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">up</span><span style="color:#f92672">:</span>
  <span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> configure
</code></pre></div>

    <img src="/img/meme/fractale_no_brain.gif"  alt="No brain fractal"  class="left"  style="width: 30em;"  />



<h3 id="le-make-help">Le <code>make help</code>:</h3>

<p>La <code>target</code> help est un petit peu spéciale et nous ne nous attarderons pas tant sur le contenu que sur les possibilités offertes par ce bout de code.</p>

<p><a href="https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html">source</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## This help.
</span><span style="color:#75715e"></span>	@awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;} /^[a-zA-Z_-]+:.*?## / {printf &#34;\033[36m%-30s\033[0m %s\n&#34;, $$1, $$2}&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span>
</code></pre></div>
<p>Le help permet donc d&rsquo;auto documenter les <code>targets</code> du <code>Makefile</code> à partir des commentaires de code.
Il suffit doc d&rsquo;écrire en fin de ligne un commentaire avec un <code>##</code> qui lira la ligne grâce au help:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Je sers à build
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	@go build -v
</code></pre></div>
<p>Donnera:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make help
help                           This help.
all                            Go Test and build
test                           Run go test
install                        Install vmctl
build                          Je sers à build</code></pre></div>
<p><img src="/img/meme/astuce_oss.gif" alt="oss117 astuce" /></p>

<h3 id="python-et-les-virtual-env">Python et les virtual env</h3>

<p>Dans python les <a href="https://wiki.archlinux.org/index.php/Python/Virtual_environment">virtuals envs</a> sont une bonne pratique de développement. Néanmoins il est parfois difficile de les utiliser avec un <code>Makefile</code>. Affin de vous éviter ma calvitie due a un arrachage de cheveux là dessu. voici une astuce pour résoudre cet inconvénient.</p>

<p>merci à <a href="https://github.com/jed-frey">@jed-frey</a> qui a <a href="https://gist.github.com/jed-frey/fcfb3adbf2e5ff70eae44b04d30640ad">pondu un gist</a> à ce sujet.</p>

<p>Voici donc ma <code>target</code> favorite pour manier des virtuals envs:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#a6e22e">init</span><span style="color:#f92672">:</span>  <span style="color:#75715e">## Install utils from requirements.txt
</span><span style="color:#75715e"></span>	@echo <span style="color:#e6db74">&#34;+ </span>$@<span style="color:#e6db74">&#34;</span>
	@python3 -m venv venv
	@<span style="color:#f92672">(</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>		source ./venv/bin/activate; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>		pip install --upgrade -r requirements.txt; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>	<span style="color:#f92672">)</span>
	@echo <span style="color:#f92672">====================================</span>
	@echo <span style="color:#f92672">[</span>OK<span style="color:#f92672">]</span> Run:
	@echo source venv/bin/activate
</code></pre></div>
<hr />

<p>Je pense vous avoir bien chargé en doc et vais donc m&rsquo;arrêter ici.</p>

<p>Je vous invite fortement à utiliser/améliorer vos <code>Makefiles</code>. Ils apportent une stabilité dans l&rsquo;usage sur vos projets et vos développeurs vous en remercieront 🙂.</p>


    <img src="/img/meme/vous_etes_les_meilleurs_asdlf.gif"  alt="Vous etes les meilleurs."  class="center"  style="width: 35em;"  />


]]></content>
        </item>
        
    </channel>
</rss>
